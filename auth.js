//Here is the basic outline for the authorization scheme. 
//There are three classes: Client, App, Server
//The client is the user, the app is the application requesting permission and the server is the data store

class Client {
  //This is the user class 
  constructor() {
    
  }
  
  login(username, password) {
  //User calls this method to login. Returns an object containing user details. 
    return {
      username, 
      password
    }
  }
}

class App {
  constructor() {
    //App id and secret that the Server class needs to share
    this.app_id = 'myapp';
    this.secret = 'XYZ';
    this.token = ''; //store token generated by the server here
  }
  
  getDetails() {
    return {
      app_id: this.app_id, 
      secret: this.secret
    }
  }
  
  storeToken(value) {
    this.token = value;
  }
}

class Server {
  //this is the server that contains user details.
  constructor() {
    //list of apps registered with the user
    this.registered_apps = ['myapp', 'myotherapp', 'myotherotherapp', 'anothermotherfu****app'];
    this.secret = 'XYZ';
    this.user = {
      username: 'abcd', 
      password: 'password'
    }
    this.generatedHash = '';
    this.retrieved = false; //flag to determine if data was retrieved successfully
  }
  
  loggingIn(userDetails) {
    if(userDetails.username == this.user.username 
       && userDetails.password == this.user.password) {
        return this.generateAccessToken();
    }
  }
  
  generateAccessToken() {
    this.generatedHash = (this.user.username+this.user.password).hashCode() //hash is being generated here
    return this.generatedHash;
  }
  
  //method to retrieve data from the server
  retrieveData(app_id, app_secret, accessToken) {
    this.registered_apps.map((registered_app) => {
      //conditional check to make sure all details match 
      if(registered_app == app_id 
        && this.secret == app_secret 
        && this.generatedHash == accessToken) {
          this.retrieved = true;
      }
    });
    return this.retrieved;
  }
}

//hashing function written on String prototype. Might want to replace with a simpler variation. 
String.prototype.hashCode = function(){
	var hash = 0;
	if (this.length == 0) return hash;
	for (let i = 0; i < this.length; i++) {
		let char = this.charCodeAt(i);
		hash = ((hash<<5)-hash)+char;
		hash = hash & hash; // Convert to 32bit integer
	}
	return hash;
}

//class instantiation and method calling 

const client = new Client();
let user = client.login('abcd', 'password');

const server = new Server();
let accessToken = server.loggingIn(user);

const app = new App();
app.storeToken(accessToken);
let appDetails = app.getDetails();

let dataRetrieved = server.retrieveData(appDetails.app_id, appDetails.secret, accessToken);
console.log(dataRetrieved);
